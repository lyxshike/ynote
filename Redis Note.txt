为什么使用redis？
   1.性能
   2.并发 在高并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常

使用redis有什么缺点？
   缓存和数据库双写一致性问题
   缓存雪崩问题
   缓存击穿问题
   缓存的并发竞争问题

单线程的redis为什么这么快？
   redis是单线程工作模型，避免了频繁的上下文切换
   纯内存操作

redis的数据类型，和每种数据类型的使用场景
   String，  计数
   hash      以cookieid作为key，存储用户信息
   list      简单的消息队列
   set       集群环境下去重
   sorted set 多了权重参数score， 排行榜用
   
redis 的过期策略以及内存淘汰机制
   1 redis采用定期删除+惰性删除策略
   如果定期删除没有删除key，然后你也没有请求key，也就是说惰性删除没有生效。
      这样， redis的内存会越来越高， 应该采用内存淘汰机制   
   2  内存淘汰机制
          #maxmemory-policy volatile-Iru

redis 和数据库双写一致性问题
    如果对数据有强一致性，不能放缓存中。
    采用正确的策略，先更新数据库，再删缓存。

如何应对缓存穿透和缓存雪崩的问题
     缓存穿透: 黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，
                从而数据库连接异常。 
        解决方案:  提供一个能迅速判断请求是否有效的拦截机制

     缓存雪崩: 	缓存同一时间大面积的失效，这个时候又来了一大波请求， 结果怼到数据库上，
                从而导致数据库连接异常
        解决方案: 1. 给缓存的失效时间，加上一个随机值， 避免集体失效
                  2. 双缓存, 缓存A的失效时间20分钟， 缓存B不设失效时间。

如何解决redis的并发竞争key的问题
    描述: 同时有多个子系统去set一个key
    1， 如果对这个key操作， 不要求顺序
        准备一个分布式锁，大家去抢锁， 抢到锁就做set操作
    2， 如果对key操作，要求顺序
        在写入数据库的时候， 需要保存时间戳。 ValueA的时间戳早于缓存中的时间戳，
		  则就不做set操作  	
  		
Redis持久化的2种方式
    RDB: 周期性将数据写入硬盘中
    AOF: 当有写操作的时候， 写入日志中。

Redis 集群的几种方式
    主从复制(默认)
	    概念 
            主数据库可以进行读写，每次写的时候会将数据同步给从数据库
            一个master可以有多个slave，一个slave只对应一个master
        主从工作机制	
            启动slave后，其主动向master发送SYNC命令，master将保存的快照文件和
            缓存的命令发送给slave，slave做对应的操作。
    哨兵
        概念
            监控主从数据库是否正常， master故障，主动将slave转化为master
            多哨兵时，哨兵之间也会自动监控
        哨兵工作机制
            哨兵向master，slave 定时发送INFO命令， 来动态获取信息，并且做响应的调整
    集群
        只需要将每个数据库节点的cluster-enable配置打开即可，
		每个集群中至少需要三个主数据库才能正常运行。 
 	